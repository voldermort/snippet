# Geany's snippets configuration file
#
# use \n or %newline% for a new line (it will be replaced by the used EOL char(s) - LF, CR/LF, CR).
# use \t or %ws% for an indentation step, it will be replaced according to the current document's indent mode.
# use \s to force whitespace at beginning or end of a value ('key= value' won't work, use 'key=\svalue').
# use %key% for all keys defined in the [Special] section.
# use %cursor% to define where the cursor should be placed after completion. You can define multiple
#     %cursor% wildcards and use the "Move cursor in snippet" to jump to the next defined cursor
#     position in the completed snippet.
# You can define a section for each supported filetype to overwrite default settings, the section
# name must match exactly the internal filetype name, run 'geany --ft-names' for a full list.
#
# Additionally, you can use most of the template wildcards like {developer}, {command:...},
# or {date} in the snippets.
# See the documentation for details.

# For a list of available filetype names, execute:
# geany --ft-names

# Default is used for all filetypes and keys can be overwritten by [filetype] sections
[Default]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (i = 0; i < %cursor%; i++)%block_cursor%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
try=try%block%\ncatch (%cursor%)%block_cursor%
uni=(c).resize(unique(c.begin(),c.end())-(c).begin());
all=%cursor%.begin(), .end()
mp=make_pair(%cursor%,)
src=[sourcecode language="python"]\n%cursor%\n[/sourcecode]

# special keys to be used in other snippets, cannot be used "standalone"
# can be used by %key%, e.g. %brace_open%
# nesting of special keys is not supported (e.g. brace_open=\n{\n%brace_close% won't work)
# key "wordchars" is very special, it defines the word delimiting characters when looking for
# a word to auto complete, leave commented to use the default wordchars
[Special]
brace_open=\n{\n\t
brace_close=}\n
block=\n{\n\t%cursor%\n}
block_cursor=\n{\n\t%cursor%\n}\n%cursor%
#wordchars=_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789

# Optional keybindings to insert snippets
# Note: these can be overridden by Geany's configurable keybindings
[Keybindings]
#for=<Ctrl>7

[C++]
for=for(int i=0; i<(int) %cursor%; i++){\n\t\n}
io=ios_base::sync_with_stdio(0);
fre=freopen("f", "r", stdin);
tem=#include <algorithm>\n#include <iostream>\n#include <iomanip>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n#include <cstdio>\n#include <cstdlib>\n#include <cctype>\n#include <cmath>\n#include <cassert>\n#include <ctime>\n#include <climits>\n#include <numeric>\n#include <valarray>\n#include <complex>\n#include <memory.h>\nusing namespace std;\n#define PI 3.14159265358979323846264338327950\nconst int dr[]={0,-1,0,1,-1,1, 1,-1};\nconst int dc[]={1,0,-1,0, 1,1,-1,-1};\nconst double eps=1e-9;\n\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<ll> vl;\ntypedef vector<vl> vvl;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef vector<double> vd;\ntypedef vector<vd> vvd;\ntypedef vector<string> vs;\ntypedef pair<int, int> pii;\ntypedef vector<pii> vpii;\ntypedef pair<double, double> pdd;\ntypedef vector<pdd> vpdd;\ntypedef complex<double> pnt;\ntypedef vector<pnt> vpnt;\ntypedef vector<vector<pair<int, long long> > > Graph;\ntypedef pair<string, int> psi;\ntypedef vector<psi> vpsi;\n#define repi(i,a,b) for(int i(a),_b(b);i<_b;++i)\n#define repd(i,a,b) for(int i(a),_b(b);i>=_b;--i)\n#define rep(i,n) for(int i(0),_n(n);i<_n;++i)\n#define reps(i,a) repi(i,0,sz(a)-1)\n#define repe(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)\n#define all(a) a.begin(),a.end()\n#define pb push_back\n#define mp make_pair\n#define maximum(a) (*max_element(all(a)))\n#define minimum(a) (*min_element(all(a)))\n#define uniq(c) (c).resize(unique(c.begin(),c.end())-(c).begin());\n#define mem(x,a) memset(x,a,sizeof(x))\n#define findx(a,x) (find(all(a),x)-a.begin())\n#define two(X) (1LL<<(X))\n#define contain(S,X) (((S)&two(X))!=0)\n\ntemplate<class T> void print(T const &x) {ostringstream os; os<<x; cout<<os.str()<<endl;}\ntemplate<class T> void print(vector<T> const &v) {ostringstream os;reps(i,v){if(i)os<<' ';os<<v[i];} cout<<os.str()<<endl;}\ntemplate<class T> void print(vector<vector<T> > const &v){ostringstream os;reps(i,v) {reps(j,v[i]){if(j)os<<' ';os<<v[i][j];}os<<endl;}cout<<os.str()<<endl;}\ntemplate<class T> void print(valarray<T> const &v) {ostringstream os; reps(i,v){if(i)os<<' ';os<<v[i];} cout<<os.str()<<endl;}\ntemplate<class T> int sz(const T&c){return (int)c.size();}\ntemplate<class T> void srt(T&c){std::sort(c.begin(),c.end());}\ntemplate<class T> void checkmin(T &a,T b){if(b<a) a=b;}\ntemplate<class T> void checkmax(T &a,T b){if(b>a) a=b;}\ntemplate<class T> T sqr(T x){return x*x;}\ntemplate<class T, class U> T cast (U x) { ostringstream os; os<<x; T res; istringstream is(os.str()); is>>res; return res; }\ntemplate<class T> vector<T> split(string s, string x=" ") {vector<T> res; reps(i,s){string a; while(i<(int)s.size()&&x.find(s[i])==string::npos)a+=s[i++]; if(!a.empty())res.push_back(cast<T>(a));} return res;}\ntemplate<class T> bool inside(T r,T c,T R, T C){return r>=0 && r<R && c>=0 && c<C;}\n\nlong long  toInt(string s){long long  r=0;istringstream sin(s);sin>>r;return r;}\ndouble lg(long long  N,long long  B){return (log10l(N))/(log10l(B)); }\nstring itoa(long long  a){if(a==0) return "0";string ret;for(long long  i=a; i>0; i=i/10) ret.push_back((i%10)+48);reverse(all(ret));return ret;}\n\n
stl=#include <set>\n#include <map>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <string>\n#include <cctype>\n#include <cstdio>\n#include <iomanip>\n#include <sstream>\n#include <cstdlib>\n#include <cassert>\n#include <climits>\n#include <complex>\n#include <numeric>\n#include <valarray>\n#include <iostream>\n#include <memory.h>\n#include <algorithm>\nusing namespace std;\n#define all(a) a.begin(),a.end()\n#define pb push_back\n#define mp make_pair\n#define rep(i,n) for(int i(0),_n(n);i<_n;++i)\n#define repi(i,a,b) for(int i(a),_b(b);i<_b;++i)\ntemplate<class T> int len(const T&c){return (int)c.size();}\ntypedef long long ll;\n#define repe(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef complex<double> pnt;\n#define mem(x,a) memset(x,a,sizeof(x)) \n\n\nint main(){\n\t%cursor%\n}\n\n\n\n\n\n\n\n\n\n\n
Token=vector< string > token( string a, string b ) {        const char *q = a.c_str();while( count( b.begin(), b.end(), *q ) ) q++;vector< string >        oot;while( *q ) {const char *e = q;while( *e && !count( b.begin(), b.end(),        *e ) ) e++;oot.push_back( string( q, e ) );q = e;while( count( b.begin(),        b.end(), *q ) ) q++;}return oot;}
Vi =typedef vector<int> vi;
Vs =typedef vector<string> vs;
Vvi =typedef vector<vector<int> > vvi;
Vd =typedef vector<double> vd;
Vvd =typedef vector<vector<double> > vvd;
Vl =typedef vector<long long> vl;
Vvl =typedef vector<vector<long long> > vvl;
Pii=typedef pair<int,int> pii;
Vpii=typedef vector<pair<int,int>  >vpii;
Pdd=typedef pair<double,double> pdd;
Vpdd=typedef vector<pair<double,double>  >vpdd;
Pll=typedef pair<long,long long> pll;
Vpll=typedef vector<pair<long ,long>  >vpll;
Psi=typedef pair<string,int> psi;
Vpsi=typedef vector<pair<string,int>  >psi;
Pis=typedef pair<int,string> pis;
Vpis=typedef vector<pair<int,string>  >vpis;
Pi=#define PI 3.14159265358979323846264338327950;
Mem=#define mem(x,a) memset(x,a,sizeof(x))\n
Repe=#define repe(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)\n
All=#define all(a) a.begin(),a.end()\n
Itoa=string itoa(long long  a){if(a==0) return "0";string ret;for(long long  i=a; i>0; i=i/10) ret.push_back((i%10)+48);reverse(ret.begin(),ret.end());return ret;}\n
Toint=long long  toint(string s){long long  r=0;istringstream sin(s);sin>>r;return r;}\n
Pb=#define pb push_back
Mp=#define mp make_pair
Gcd=template<class T> inline T gcd(T a,T b) {if(a<0)return gcd(-a,b);if(b<0)return gcd(a,-b);return (b==0)?a:gcd(b,a%b);}\n
Lcm=template<class T> inline T lcm(T a,T b) {if(a<0)return lcm(-a,b);if(b<0)return lcm(a,-b);return a*(b/gcd(a,b));}\n
Len=template<class T> int len(const T&c){return (int)c.size();}\n
euclid=typedef long long ll;\nstruct Triple\n{\n    ll d, x, y;\n    Triple(ll q, ll w, ll e ) : d( q ), x( w ), y( e ) {}\n};\nTriple egcd( ll a, ll b )\n{\n    if( !b ) return Triple( a, ll( 1 ), ll( 0 ) );\n    Triple q = egcd( b, a % b );\n    return Triple( q.d, q.y, q.x - a / b * q.y );\n}\nTriple ldioph( ll a, ll b, ll c )\n{\n    Triple t = egcd( a, b );\n    if( c % t.d ) return Triple( 0, 0, 0 );\n    t.x *= c / t.d; t.y *= c / t.d;\n    return t;\n}\n\n
Split=vs split(string s, string x=" ") {vs res; rep(i,len(s)){string a; while(i<(int)s.size()&&x.find(s[i])==string::npos)a+=s[i++]; if(!a.empty())res.push_back((a));} return res;}\n
Uniq=#define uniq(c) (c).resize(unique(c.begin(),c.end())-(c).begin());\n
pd=cout.precision(10);\ncout.setf(ios::fixed);\n
Isplit=vi isplit(string s, string x=" ") {vi res; rep(i,len(s)){string a; while(i<(int)s.size()&&x.find(s[i])==string::npos)a+=s[i++]; if(!a.empty())res.push_back((atol(a.c_str())));} return res;}\n
[Java]
for=for (int i = 0; i < %cursor%; i++)%brace_open%\n%brace_close%

[PHP]
for=for ($i = 0; $i < %cursor%; $i++)%brace_open%\n%brace_close%

[Python]
for=for i in xrange(%cursor%):\n\t
if=if %cursor%:\n\t
elif=elif %cursor%:\n\t
else=else:\n\t
while=while %cursor%:\n\t
try=try:\n\t%cursor%\nexcept Exception, ex:\n\t
with=with %cursor%:\n\t
def=def %cursor% (%cursor%):\n\t""" Function doc """\n\t
class=class %cursor%:\n\t""" Class doc """\n\t\n\tdef __init__ (self):\n\t\t""" Class initialiser """\n\t\tpass

[Ferite]
iferr=iferr%block_cursor%fix%block%
monitor=monitor%block_cursor%handle%block%

[Haskell]
# prevent completion of "do"-while-loops in Haskell
do=

[HTML]
table=<table>\n\t<tr>\n\t\t<td>%cursor%</td>\n\t</tr>\n</table>
